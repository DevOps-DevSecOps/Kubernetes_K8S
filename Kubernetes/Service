[Services]
The each Pod has its own IP address.
Pods are ephemeral because are destory frequently when Pods delete OR terminated, recreating the new pods with existing YAML template OR command line interface.
So the Pod IP address are frequently keep on changing.
Service selector matches a Pod label (OR) If the Label/Selector then Pod and Service match.
But the Service will maintain the stable static IP address for 

[ServiceTypes]
Kubernetes ServiceTypes allow you to specify what kind of Service you want.
● ClusterIP
The ClusterIP is the default for the service.
Its only reachable from with in the cluster.
It exposes the Pod to only within the cluster.
It assigns a private IP address in ClusterIP range.
It can talk to applications only with in the cluster.
So the Pods can reach the service on apps port number.
● NodePort
A port that is the same on each node that is also reachable externally outside.
It exposes the Pod to outside the cluster.
It assigns a private IP address in ClusterIP range.
It assigns a port on the worker nodes to expose it outside the cluster.
Port is open on every node IP.
● LoadBalancer
It created by the cloud provider that will route external traffic to every node on the NodePort (ELB on AWS).
It exposes the Pod to outside the cluster.
It create a LoadBalancer in cloud.
● ExternalName
It can provide a DNS name for the service.
This only works when the DNS add-on is enabled.
It add CNAME DNS record to coreDNS.

[hostPort]
The hostPort setting applies to the Kubernetes containers.
The container port will be exposed to the external network at <hostIP>:<hostPort>, where the hostIP is the IP address of the Kubernetes node where the container is running and the hostPort is the port requested by the user.
The hostPort feature allows to expose a single container port on the host IP.
Using the hostPort to expose an application to the outside of the Kubernetes cluster.
The host IP can change when the container is restarted, two containers using the same hostPort cannot be scheduled on the same node.

[hostNetwork]
When a pod is configured with "hostNetwork: true", the applications running in such a pod can directly see the network interfaces of the host machine where the pod was started.
An application that is configured to listen on all network interfaces will in turn be accessible on all network interfaces of the host machine.
The every time the pod is restarted Kubernetes can reschedule the pod onto a different node and so the application will change its IP address.
Besides that two applications requiring the same port cannot run on the same node. 
This can lead to port conflicts when the number of applications running on the cluster grows.

[Endpoints]
Service selector matches a pod label, Kubernetes will automatically create an Endpoints object with the same name as the service, which stores the pod’s IP address and port.
When the service receives a request, its proxy will redirect it to one of those IPs and ports.
Kubernetes will automatically update the endpoint resource IPs in case of editing or scaling of a deployment in which pods are already linked to a service.
If create a service without specifying a pod selector, Kubernetes will not generate the endpoint resource and it will be up to create one with the endpoints to link to the service.
